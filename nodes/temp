        context = {key: value for key, value in kwargs.items() if value is not None}
        results = [None] * 8

        # Handle the case where `params` is empty
        if params == "" and any(value is not None for value in kwargs.values()):
            # Iterate over a static copy of the dictionary to avoid mutations during iteration
            for i, (key, value) in enumerate(list(context.items())):
                # Safely execute for each input
                code = f"result_{key} = {repr(value)}"
                exec(code, globals(), context)
                results[f"O{i + 1}"] = context.get(f"result_{key}")

            # Return the results in the correct output order
            return tuple(results.get(f"O{i + 1}", None) for i in range(8))












        return ("None",)
        # Handle the case where `params` is not empty
        try:
            code = f"result = {params}"
            exec(code, globals(), context)
            return self.done(x=str(context["result"]))
        except Exception as e:
            # Handle errors gracefully
            return self.done(x=f"Exception occurred: {e}")









        #context = {key: value for key, value in kwargs.items() if value is not None}
        results = [None] * 8

        if params == "" and any(value is not None for value in kwargs.values()):
            # Iterate over the expected input keys (`I1`, `I2`, ..., `I8`)
            for i in range(8):
                input_key = f"I{i + 1}"  # I1, I2, ..., I8
                if input_key in kwargs and kwargs[input_key] is not None:
                    # Safely execute for each input
                    code = f"result_{input_key} = {repr(kwargs[input_key])}"
                    context = {}
                    exec(code, globals(), context)  # Execute dynamically
                    results[i] = context.get(f"result_{input_key}")  # Assign to the correct slot

            # Return the results as a tuple
            return tuple(results)







        #context = {key: value for key, value in kwargs.items() if value is not None}
        results = [None] * 8

        if params == "" and any(value is not None for value in kwargs.values()):
            # Iterate over the expected input keys (`I1`, `I2`, ..., `I8`)
            context = {}
            for i in range(9, 16):
                input_key = f"I{i + 1}"  # I1, I2, ..., I8
                if input_key in kwargs and kwargs[input_key] is not None:
                    # Simply store the object reference in the context directly
                    context[f"result_{input_key}"] = kwargs[input_key]
                    # Add to the appropriate output slot
                    results[i] = context[f"result_{input_key}"]

            # Return the results as a tuple
            return tuple(results)

        # Handle the case where `params` is not empty
        try:
            context = {key: value for key, value in kwargs.items() if value is not None}
            code = f"result = {params}"
            exec(code, globals(), context)
            return self.done(x=str(context["result"]))
        except Exception as e:
            # Handle errors gracefully
            return self.done(x=f"Exception occurred: {e}")

